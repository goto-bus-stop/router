schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(
    url: "https://specs.apollo.dev/source/v0.1"
    import: ["@sourceAPI", "@sourceType", "@sourceField"]
  )
  @sourceAPI(
    graph: "simple"
    name: "a"
    http: { baseURL: "https://localhost:4001/" }
  ) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

directive @sourceAPI(
  graph: String!
  name: String!
  http: HTTPSourceAPI
) repeatable on SCHEMA

directive @sourceField(
  graph: String!
  api: String
  http: HTTPSourceField
  selection: JSONSelection
) repeatable on FIELD_DEFINITION

directive @sourceType(
  graph: String!
  api: String
  http: HTTPSourceType
  selection: JSONSelection
  keyTypeMap: JSON
) repeatable on OBJECT | INTERFACE

type Hello
  @join__type(graph: SIMPLE, key: "id")
  @sourceType(
    graph: "simple"
    api: "a"
    http: { GET: "/hello/{id}" }
    selection: ".data { id field }"
  ) {
  id: ID!
  field: String
  world: World
    @sourceField(
      graph: "simple"
      api: "a"
      http: { GET: "/hello/{id}/world" }
      selection: ".data { field }"
    )
}

input HTTPHeaderMapping @join__type(graph: SIMPLE) {
  name: String!
  as: String
  value: String
}

input HTTPSourceAPI @join__type(graph: SIMPLE) {
  baseURL: String!
  default: Boolean
  headers: [HTTPHeaderMapping!]
}

input HTTPSourceField @join__type(graph: SIMPLE) {
  GET: URLPathTemplate
  POST: URLPathTemplate
  PUT: URLPathTemplate
  PATCH: URLPathTemplate
  DELETE: URLPathTemplate
  headers: [HTTPHeaderMapping!]
  body: JSONSelection
}

input HTTPSourceType @join__type(graph: SIMPLE) {
  GET: URLPathTemplate
  POST: URLPathTemplate
  headers: [HTTPHeaderMapping!]
  body: JSONSelection
}

scalar join__FieldSet
  @specifiedBy(url: "http://just-to-avoid-valiadation-warnings")

enum join__Graph {
  NORMAL @join__graph(name: "normal", url: "http://normal-subgraph")
  SIMPLE @join__graph(name: "simple", url: "http://connector-subgraph")
}

scalar JSON
  @join__type(graph: SIMPLE)
  @specifiedBy(url: "https://www.rfc-editor.org/rfc/rfc8259")

scalar JSONSelection
  @join__type(graph: SIMPLE)
  @specifiedBy(url: "https://specs.apollo.dev/source/v1.0")

scalar link__Import
  @specifiedBy(url: "http://just-to-avoid-valiadation-warnings")

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query @join__type(graph: NORMAL) @join__type(graph: SIMPLE) {
  fieldBackedByRealResolver: TypeWithResolver @join__field(graph: NORMAL)
  hello: Hello
    @join__field(graph: SIMPLE)
    @sourceField(
      graph: "simple"
      api: "a"
      http: { GET: "/hello" }
      selection: ".data { id }"
    )
}

type TypeWithResolver @join__type(graph: NORMAL, key: "id") {
  id: ID!
}

scalar URLPathTemplate
  @join__type(graph: SIMPLE)
  @specifiedBy(url: "https://specs.apollo.dev/source/v1.0")

type World @join__type(graph: SIMPLE) {
  field: String
}
