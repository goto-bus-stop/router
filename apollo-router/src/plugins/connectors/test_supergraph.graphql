schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @join__directive(
    graphs: [KITCHEN_SINK]
    name: "link"
    args: {
      url: "https://specs.apollo.dev/source/v0.1"
      import: ["@sourceAPI", "@sourceType", "@sourceField"]
    }
  )
  @join__directive(
    graphs: [KITCHEN_SINK]
    name: "sourceAPI"
    args: { name: "a", http: { baseURL: "http://localhost:8080/v1/" } }
  ) {
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

type EntityAcrossBoth
  @join__type(graph: KITCHEN_SINK, key: "a b")
  @join__type(graph: NORMAL, key: "a b")
  @join__directive(
    graphs: [KITCHEN_SINK]
    name: "sourceType"
    args: {
      api: "a"
      http: { GET: "/entity/{a}/{b}" }
      selection: ".data { d }"
    }
  ) {
  a: ID
    @join__field(graph: KITCHEN_SINK, external: true)
    @join__field(graph: NORMAL)
  b: ID
    @join__field(graph: KITCHEN_SINK, external: true)
    @join__field(graph: NORMAL)
  d: String @join__field(graph: KITCHEN_SINK)
  e: String
    @join__field(graph: KITCHEN_SINK)
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: { api: "a", http: { GET: "/entity/{a}/{b}/e" }, selection: ".data" }
    )
  c: String @join__field(graph: NORMAL)
}

type Hello
  @join__type(graph: KITCHEN_SINK, key: "id")
  @join__directive(
    graphs: [KITCHEN_SINK]
    name: "sourceType"
    args: {
      api: "a"
      http: { GET: "/hello/{id}" }
      selection: ".data { id field enum: .enum_value }"
    }
  ) {
  id: ID!
  field: String
  world: World
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: {
        api: "a"
        http: { GET: "/hello/{id}/world" }
        selection: ".data { field nested { field } }"
      }
    )
  enum: OutputEnum
}

type Ia implements TestingInterface
  @join__implements(graph: KITCHEN_SINK, interface: "TestingInterface")
  @join__type(graph: KITCHEN_SINK) {
  id: ID!
  a: String
  nested: NestedInterface
}

type Ib implements TestingInterface
  @join__implements(graph: KITCHEN_SINK, interface: "TestingInterface")
  @join__type(graph: KITCHEN_SINK) {
  id: ID!
  b: String
  nested: NestedInterface
}

enum InputEnum @join__type(graph: KITCHEN_SINK) @join__type(graph: NORMAL) {
  Y @join__enumValue(graph: KITCHEN_SINK) @join__enumValue(graph: NORMAL)
  Z @join__enumValue(graph: KITCHEN_SINK) @join__enumValue(graph: NORMAL)
}

type IOa implements TestingInterfaceObject
  @join__implements(graph: NORMAL, interface: "TestingInterfaceObject")
  @join__type(graph: NORMAL, key: "id") {
  id: ID!
  a: String
  c: String @join__field
  d: String @join__field
}

type IOb implements TestingInterfaceObject
  @join__implements(graph: NORMAL, interface: "TestingInterfaceObject")
  @join__type(graph: NORMAL, key: "id") {
  id: ID!
  b: String
  c: String @join__field
  d: String @join__field
}

scalar join__FieldSet
  @specifiedBy(url: "https://just-avoiding-validation-warnings")

enum join__Graph {
  KITCHEN_SINK @join__graph(name: "kitchen-sink", url: "http://localhost:8080/")
  NORMAL @join__graph(name: "normal", url: "http://localhost:8081/")
}

scalar link__Import
  @specifiedBy(url: "https://just-avoiding-validation-warnings")

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation @join__type(graph: KITCHEN_SINK) {
  mutation(input: MutationInput): MutationOutput
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: {
        api: "a"
        http: {
          POST: "/mutation"
          body: """
          nums: .input.nums
          values: .input.values {
            num
          }
          """
        }
        selection: ".data { success }"
      }
    )
}

input MutationInput @join__type(graph: KITCHEN_SINK) {
  nums: [Int!]
  values: [MutationNestedInput!]
}

input MutationNestedInput @join__type(graph: KITCHEN_SINK) {
  num: Int
}

type MutationOutput @join__type(graph: KITCHEN_SINK) {
  success: Boolean
}

type Nested @join__type(graph: KITCHEN_SINK) {
  field: String
}

interface NestedInterface @join__type(graph: KITCHEN_SINK) {
  id: ID!
}

union NestedUnion
  @join__type(graph: KITCHEN_SINK)
  @join__unionMember(graph: KITCHEN_SINK, member: "NestedUnionC")
  @join__unionMember(graph: KITCHEN_SINK, member: "NestedUnionD") =
    NestedUnionC
  | NestedUnionD

type NestedUnionC @join__type(graph: KITCHEN_SINK) {
  x: String
}

type NestedUnionD @join__type(graph: KITCHEN_SINK) {
  w: String
}

type NIa implements NestedInterface
  @join__implements(graph: KITCHEN_SINK, interface: "NestedInterface")
  @join__type(graph: KITCHEN_SINK) {
  id: ID!
  a: String
}

type NIb implements NestedInterface
  @join__implements(graph: KITCHEN_SINK, interface: "NestedInterface")
  @join__type(graph: KITCHEN_SINK) {
  id: ID!
  b: String
}

enum OutputEnum @join__type(graph: KITCHEN_SINK) @join__type(graph: NORMAL) {
  A @join__enumValue(graph: KITCHEN_SINK) @join__enumValue(graph: NORMAL)
  B @join__enumValue(graph: KITCHEN_SINK) @join__enumValue(graph: NORMAL)
  C @join__enumValue(graph: KITCHEN_SINK)
  D @join__enumValue(graph: NORMAL)
}

type Query @join__type(graph: KITCHEN_SINK) @join__type(graph: NORMAL) {
  hello: Hello
    @join__field(graph: KITCHEN_SINK)
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: { api: "a", http: { GET: "/hello" }, selection: ".data { id }" }
    )
  withArguments(value: String, done: Boolean, enum: InputEnum): String
    @join__field(graph: KITCHEN_SINK)
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: {
        api: "a"
        http: {
          GET: "/with-arguments?value={value}&done={done}&enum_value={enum}"
        }
        selection: ".data"
      }
    )
  interfaces: [TestingInterface]
    @join__field(graph: KITCHEN_SINK)
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: {
        api: "a"
        http: { GET: "/interfaces" }
        selection: ".data { id a b nested { id a b } }"
      }
    )
  unions: [TestingUnion]
    @join__field(graph: KITCHEN_SINK)
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: {
        api: "a"
        http: { GET: "/unions" }
        selection: ".data { z y nested { x w } }"
      }
    )
  fieldBackedByRealResolver: TypeWithResolver @join__field(graph: NORMAL)
  startJoin: EntityAcrossBoth @join__field(graph: NORMAL)
  interfaceObject: [TestingInterfaceObject] @join__field(graph: NORMAL)
}

interface TestingInterface @join__type(graph: KITCHEN_SINK) {
  id: ID!
  nested: NestedInterface
}

interface TestingInterfaceObject
  @join__type(graph: KITCHEN_SINK, key: "id", isInterfaceObject: true)
  @join__type(graph: NORMAL, key: "id")
  @join__directive(
    graphs: [KITCHEN_SINK]
    name: "sourceType"
    args: {
      api: "a"
      http: { GET: "/interface-object/{id}" }
      selection: ".data { c }"
    }
  ) {
  id: ID!
    @join__field(graph: KITCHEN_SINK, external: true)
    @join__field(graph: NORMAL)
  c: String @join__field(graph: KITCHEN_SINK)
  d: String
    @join__field(graph: KITCHEN_SINK)
    @join__directive(
      graphs: [KITCHEN_SINK]
      name: "sourceField"
      args: {
        api: "a"
        http: { GET: "/interface-object/{id}/d" }
        selection: ".data"
      }
    )
}

union TestingUnion
  @join__type(graph: KITCHEN_SINK)
  @join__unionMember(graph: KITCHEN_SINK, member: "UnionA")
  @join__unionMember(graph: KITCHEN_SINK, member: "UnionB") =
    UnionA
  | UnionB

type TypeWithResolver @join__type(graph: NORMAL, key: "id") {
  id: ID!
}

type UnionA @join__type(graph: KITCHEN_SINK) {
  z: String
  nested: NestedUnion
}

type UnionB @join__type(graph: KITCHEN_SINK) {
  y: String
}

type World @join__type(graph: KITCHEN_SINK) {
  field: String
  nested: Nested
}

directive @join__directive(
  graphs: [join__Graph!]!
  name: String!
  args: join__DirectiveArguments!
) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION | INTERFACE

scalar join__DirectiveArguments
  @specifiedBy(url: "https://just-avoiding-validation-warnings")
